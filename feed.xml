<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.5.2">Jekyll</generator><link href="https://blog.harigopal.in/feed.xml" rel="self" type="application/atom+xml" /><link href="https://blog.harigopal.in/" rel="alternate" type="text/html" /><updated>2017-09-13T20:48:19+05:30</updated><id>https://blog.harigopal.in/</id><title type="html">Hari Gopal</title><subtitle>Description pending. :-|
</subtitle><entry><title type="html">Validating Rails API requests with Reform</title><link href="https://blog.harigopal.in/guides/validating-rails-api-requests-with-reform/" rel="alternate" type="text/html" title="Validating Rails API requests with Reform" /><published>2017-09-13T00:00:00+05:30</published><updated>2017-09-13T00:00:00+05:30</updated><id>https://blog.harigopal.in/guides/validating-rails-api-requests-with-reform</id><content type="html" xml:base="https://blog.harigopal.in/guides/validating-rails-api-requests-with-reform/">&lt;p&gt;I’ve written about the creation of custom exception classes to organize code in Rails web applications and APIs. However, while going through my previous article, I realized that my final example glossed over how request parameter validation failures would be detected by the API in the first place.&lt;/p&gt;

&lt;p&gt;Today I want to discuss a pattern that I haven’t seen in the wild - one which uses &lt;em&gt;Reform&lt;/em&gt; - form objects, decoupled from models (their description) - and exception classes to &lt;em&gt;beautifully&lt;/em&gt; manage API parameter validation.&lt;/p&gt;

&lt;h2 id=&quot;an-intro-to-form-objects-for-those-unfamiliar-with-it&quot;&gt;An intro to form objects, for those unfamiliar with it.&lt;/h2&gt;

&lt;p&gt;If you haven’t used form objects before, know that they allow you to decouple validation of input from the user (via forms), and the validation of data managed by a &lt;code class=&quot;highlighter-rouge&quot;&gt;Model&lt;/code&gt;. My primary reason for favoring this separation is that it allows the model validations to be less constrained than form validation.&lt;/p&gt;

&lt;p&gt;Validations failures from a model should be &lt;strong&gt;unexpected&lt;/strong&gt;, whereas form validations are always &lt;strong&gt;expected&lt;/strong&gt; (users make mistakes) and thus should be handled as a natural part of your application. Decoupling in this manner also makes it easy to manage multiple forms that interact with one or more models, with different validation requirements. Google &lt;code class=&quot;highlighter-rouge&quot;&gt;form validation vs model validation&lt;/code&gt; to learn more.&lt;/p&gt;

&lt;h2 id=&quot;but-api-s-dont-have-forms-right&quot;&gt;But API-s don’t &lt;em&gt;have&lt;/em&gt; forms. Right?&lt;/h2&gt;

&lt;p&gt;No, they don’t. What they do have are end-points where you &lt;em&gt;POST&lt;/em&gt; data, and expect something about your application’s database to change. Such data needs to be validated. This article is going to focus on how to use &lt;em&gt;Reform&lt;/em&gt; - a library meant for validating data submitted by &lt;em&gt;users&lt;/em&gt; into &lt;em&gt;forms&lt;/em&gt;, to validate data submitted by &lt;em&gt;clients&lt;/em&gt; to &lt;em&gt;API endpoints&lt;/em&gt;. &lt;em&gt;Clients&lt;/em&gt; instead of &lt;em&gt;users&lt;/em&gt;, and &lt;em&gt;API endpoints&lt;/em&gt; instead of &lt;em&gt;forms&lt;/em&gt;. Let’s begin.&lt;/p&gt;

&lt;h2 id=&quot;post-apiusersinvite&quot;&gt;POST /api/users/invite&lt;/h2&gt;

&lt;p&gt;Let’s assume that we need to implement a simple &lt;em&gt;invite&lt;/em&gt; route for our API - to invite other users to join our platform. It accepts just two parameters:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;email&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;…and responds with a &lt;code class=&quot;highlighter-rouge&quot;&gt;200 OK&lt;/code&gt; if the invitation can be processed.&lt;/p&gt;

&lt;p&gt;However, as with all such requests, there are conditions which must be fulfilled before the request can be executed. Let’s list down three simple requirements:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;email&lt;/code&gt; is required.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;email&lt;/code&gt; must look like an email address.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; is optional, but if present, it must be longer than 3 characters.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The last one is a bit contrived, but this is just a demonstration. ¯_(ツ)_/¯&lt;/p&gt;

&lt;h2 id=&quot;create-a-reform-form&quot;&gt;Create a Reform Form.&lt;/h2&gt;

&lt;p&gt;Let’s get the basics out of the way. Setting up &lt;em&gt;Reform&lt;/em&gt; should be pretty simple. Add &lt;code class=&quot;highlighter-rouge&quot;&gt;gem 'reform-rails', '~&amp;gt; 0.1.7'&lt;/code&gt; to your &lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;, and run &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle install&lt;/code&gt;. That should be it. Now, let’s build our form object.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/harigopal/1de28e963edeed26e9580fb00749e2a3.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;reform-rails&lt;/code&gt; allows you to write validations in much the same way that you’d write validations for regular Rails models. Granted that this is a very simple form, but even complex Reform forms are readable, and its API is rich and flexible.&lt;/p&gt;

&lt;p&gt;If you’re confused by &lt;code class=&quot;highlighter-rouge&quot;&gt;email: true&lt;/code&gt;, I’m assuming the presence of a custom Rails validator. For an example, check out &lt;a href=&quot;http://guides.rubyonrails.org/active_record_validations.html#custom-validators&quot;&gt;Rails’ documentation on adding custom validators&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Note that I’m overriding the default &lt;code class=&quot;highlighter-rouge&quot;&gt;save&lt;/code&gt; method, since I don’t want Reform touching the model. I advise keeping code handling the &lt;em&gt;actual&lt;/em&gt; invitation out of the form. Our form is responsible for data validation, not operations. &lt;a href=&quot;/guides/extending-ruby-on-rails-with-service-objects&quot;&gt;Leave business logic to services.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;set-up-the-endpoint&quot;&gt;Set up the endpoint.&lt;/h2&gt;

&lt;script src=&quot;https://gist.github.com/harigopal/ec811f2bc3cf7e9f18006a3a3349c4dd.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;em&gt;Reform&lt;/em&gt; requires explicit validation which, I think, reads better than the &lt;em&gt;Rails way&lt;/em&gt;. Unlike Rails’ &lt;code class=&quot;highlighter-rouge&quot;&gt;if @user.save&lt;/code&gt;, &lt;em&gt;Reform&lt;/em&gt; asks the form object to validate the form with the supplied params, &lt;em&gt;and then&lt;/em&gt; do something if the validation passes (or something else when it fails).&lt;/p&gt;

&lt;p&gt;In this case, a failure to validate lets us raise &lt;code class=&quot;highlighter-rouge&quot;&gt;ValidationException&lt;/code&gt;, passing it the form object. This is a custom exception which &lt;a href=&quot;/guides/exceptions-as-first-class-citizens-on-rails&quot;&gt;I’d elaborated on in a previous article&lt;/a&gt;. Let’s take another look.&lt;/p&gt;

&lt;h2 id=&quot;validationfailureexception&quot;&gt;ValidationFailureException&lt;/h2&gt;

&lt;p&gt;I’m going to extend an &lt;code class=&quot;highlighter-rouge&quot;&gt;ApplicationException&lt;/code&gt; class that I went into detail in my article on exception classes:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/harigopal/ab851d1f2a0a8bb8a4a70409ad03c2b2.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Coupled with application level exception handling, as described in my previous post, if you &lt;em&gt;POST&lt;/em&gt; to the API with invalid data, it responds with a lot of detail.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/harigopal/1152bb382b07e8087ffea534e602f8e8.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Isn’t that beautiful?&lt;/p&gt;

&lt;p&gt;Those validation errors can now be used by the client to display the failure to the user. Obviously, this needs to be set up only once. As long as you validate params with Reform, and pass the form with the errors to &lt;code class=&quot;highlighter-rouge&quot;&gt;ValidationFailureException&lt;/code&gt; when raising it, responses in a standard format are taken care of.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Form objects are a great abstraction that allow us to deal with of the process of validating user input in one place. If you’re building an API for other developers or the public, good documentation is an absolute necessity. And while invalid form submissions showing users what’s wrong is commonplace, APIs doing something similar for their clients is &lt;em&gt;rare&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Using Reform, it’s possible to give consumers of your API insights into what went wrong the same way a user entering incorrect information into a form is treated. Sure, once set up, an API client won’t make (the same) mistake again. But when integrating with a new API, a little help can go a long way.&lt;/p&gt;</content><author><name></name></author><category term="ruby" /><category term="rails" /><category term="services" /><summary type="html">I’ve written about the creation of custom exception classes to organize code in Rails web applications and APIs. However, while going through my previous article, I realized that my final example glossed over how request parameter validation failures would be detected by the API in the first place.</summary></entry><entry><title type="html">Extending Ruby on Rails with Service Objects</title><link href="https://blog.harigopal.in/guides/extending-ruby-on-rails-with-service-objects/" rel="alternate" type="text/html" title="Extending Ruby on Rails with Service Objects" /><published>2017-04-15T00:00:00+05:30</published><updated>2017-04-15T00:00:00+05:30</updated><id>https://blog.harigopal.in/guides/extending-ruby-on-rails-with-service-objects</id><content type="html" xml:base="https://blog.harigopal.in/guides/extending-ruby-on-rails-with-service-objects/">&lt;p&gt;Service objects are a pattern that I believe should be part of Rails’ default. This extends the basic MVC model by introducing services to implement business logic (instead of stuffing it into a model). While Rails’ default assumption that each model would hold its own business logic is &lt;em&gt;sound&lt;/em&gt;, it doesn’t scale well when the application’s size increases.&lt;/p&gt;

&lt;p&gt;There are a lot of articles suggesting patterns on where and how to store services. My approach is mostly the same, but with a few &lt;em&gt;upgrades&lt;/em&gt;. This is what an example &lt;code class=&quot;highlighter-rouge&quot;&gt;app/services&lt;/code&gt; folder might look like:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/harigopal/c0b2ddb53f3b8e0d5875c00f33beda51.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The main thing to note here is that there are a few &lt;em&gt;conventions&lt;/em&gt;, but no strict &lt;em&gt;rules&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;one-or-few-responsibilities&quot;&gt;One, or few responsibilities&lt;/h2&gt;

&lt;p&gt;Naming plays a big role here - try to keep the name as specific as possible to avoid the temptation to &lt;em&gt;extend&lt;/em&gt; the responsibility of a service object. So, instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;Users::SlackService&lt;/code&gt;, it might be a better idea to call it &lt;code class=&quot;highlighter-rouge&quot;&gt;Users::SendSlackMessageService&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Unlike models, with their attached database tables, it’s cheap (zero cost, really) to create new services - spin new ones up whenever you encounter business logic that needs to be implemented.&lt;/p&gt;

&lt;h2 id=&quot;service-related-to-a-model&quot;&gt;Service related to a model&lt;/h2&gt;

&lt;script src=&quot;https://gist.github.com/harigopal/7ebffe156a8239ccac5d7d256adefb2c.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Services are grouped into a &lt;em&gt;pluralized-model-name&lt;/em&gt; module when the action they perform is closely related to a model. This group is for the sake of organization - nothing more, so if a service does something that’s related to two models, you’ll have to make a call on which module it best fits into.&lt;/p&gt;

&lt;h2 id=&quot;-and-when-its-not-related-to-a-model&quot;&gt;… and when it’s &lt;em&gt;not&lt;/em&gt; related to a model&lt;/h2&gt;

&lt;script src=&quot;https://gist.github.com/harigopal/5789ff9820bb7d86bd815654cd16c8b7.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Frequently, business logic may not tie in directly to &lt;em&gt;any&lt;/em&gt; model. In this example, there’s a third-party service that the application needs to interact with, so the module its grouped under is simply the name of the service. The &lt;code class=&quot;highlighter-rouge&quot;&gt;execute&lt;/code&gt; method is also replaced with a &lt;code class=&quot;highlighter-rouge&quot;&gt;posts&lt;/code&gt; method to indicate that the service returns something, instead of simply performing an action.&lt;/p&gt;

&lt;h2 id=&quot;concerns-to-share-abilities&quot;&gt;Concerns to share abilities&lt;/h2&gt;

&lt;p&gt;Embrace Rails concerns when you encounter pieces of functionality that is useful in a number of situations - a common one is the ability to write to the log.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/harigopal/2d9d7ffeedbb360f70381559dbcb7766.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Including this module into a service will allow it to easily write to the Rails log with additional information regarding the source of the message and a timestamp.&lt;/p&gt;

&lt;h2 id=&quot;theyre-easy-to-test&quot;&gt;They’re easy to test&lt;/h2&gt;

&lt;p&gt;Because these are plain Ruby classes, they’re generally easy to test. If you’ve stuck to the &lt;em&gt;Single-resposibility Principle&lt;/em&gt;, the test cases should be pretty simple as well - writing a lot of small services pays off here.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;If you’re working on a non-trivial project, services can be a massive boon. There’s definitely a &lt;em&gt;back-to-the-roots&lt;/em&gt; feel to it, and that’s deliberate - Ruby is an expressive, easy-to-read language, and service objects are plain Ruby classes that describe all the little pieces that form the building blocks of your application.&lt;/p&gt;

&lt;p&gt;I’ve heard it said that a someone looking through your &lt;code class=&quot;highlighter-rouge&quot;&gt;services&lt;/code&gt; folder should get a fair idea of what your application &lt;em&gt;does&lt;/em&gt;, and I think that’s an inevitable end-result if you write service objects properly.&lt;/p&gt;</content><author><name></name></author><category term="ruby" /><category term="rails" /><category term="services" /><summary type="html">Service objects are a pattern that I believe should be part of Rails’ default. This extends the basic MVC model by introducing services to implement business logic (instead of stuffing it into a model). While Rails’ default assumption that each model would hold its own business logic is sound, it doesn’t scale well when the application’s size increases.</summary></entry><entry><title type="html">Exceptions as first-class citizens on Rails</title><link href="https://blog.harigopal.in/guides/exceptions-as-first-class-citizens-on-rails/" rel="alternate" type="text/html" title="Exceptions as first-class citizens on Rails" /><published>2017-02-03T00:00:00+05:30</published><updated>2017-02-03T00:00:00+05:30</updated><id>https://blog.harigopal.in/guides/exceptions-as-first-class-citizens-on-rails</id><content type="html" xml:base="https://blog.harigopal.in/guides/exceptions-as-first-class-citizens-on-rails/">&lt;p&gt;I want to share a pattern that I’ve repeated multiple times in the past when developing API-s with Rails, which grants the ability to respond to invalid requests with a standardized message format by raising an exception.&lt;/p&gt;

&lt;p&gt;To be clear, I’m talking about &lt;em&gt;exceptions&lt;/em&gt;, and not &lt;em&gt;errors&lt;/em&gt;. To quote a &lt;a href=&quot;https://wiki.haskell.org/Error_vs._Exception&quot;&gt;Haskell wiki page on the topic&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;…we use the term exception for &lt;strong&gt;expected but irregular situations&lt;/strong&gt; at runtime and the term error for &lt;strong&gt;mistakes in the running program&lt;/strong&gt; that can be resolved only by fixing the program.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A few examples of exceptions would be a client which supplies invalid authentication credentials, or one supplying insufficient data for an operation, etc.&lt;/p&gt;

&lt;h2 id=&quot;preview-of-the-end-result&quot;&gt;Preview of the end result&lt;/h2&gt;

&lt;p&gt;To decide whether this interests you, have a look at the end result - a few exception responses:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;AuthenticationFailure&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; HTTP 401&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;code&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;authentication_failure&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Could not validate authorization&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Please authenticate and acquire JWT before attempting to access restricted routes. JWT should be passed in the Authorization header.&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ValidationFailure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; HTTP 422&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;code&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;validation_failure&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Validation of params failed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;The server could not validate the parameters present with the request. Please check the validation_errors key (hash) for more details.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;validation_errors&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cannot be blank&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;email&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;does not look like an email address&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Let’s dig in!&lt;/p&gt;

&lt;h2 id=&quot;first-class&quot;&gt;First-class&lt;/h2&gt;

&lt;p&gt;I organize my exceptions inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;app&lt;/code&gt; folder, treating it as equal to any of the other piece of the Rails application:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Rails.root
├── app
... ├── channels
    ├── controllers
    ├── exceptions
    │   ├── users
    │   │   ├── authentication_failed_exception.rb
    │   │   └── validation_failure_exception.rb
    │   └── application_exception.rb
    ├── jobs
    ...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;exception-classes&quot;&gt;Exception classes&lt;/h2&gt;

&lt;p&gt;Each exception class sets four instance variables that describe the exception.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Users&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AuthenticationFailureException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationException&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:authentication_failure&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Could not validate authorization'&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@description&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Please authenticate and acquire JWT before attempting to access restricted routes. JWT should be passed in the Authorization header.'&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;401&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;code&lt;/code&gt; is useful for clients to programmatically handle these responses.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;message&lt;/code&gt; is a short error message.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;description&lt;/code&gt; is a longer message that can help developers understand the reason for the exception, and fix or incorporate it into the design of the client.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;status&lt;/code&gt; is an over-ride status code for the HTTP response.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;applicationexception&quot;&gt;ApplicationException&lt;/h2&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;ApplicationException&lt;/code&gt; class defines the response object and a default HTTP status code.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ApplicationException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;StandardError&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;response&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;code: &lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;message: &lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;description: &lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@description&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;status&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;422&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;bringing-it-to-life-with-rescue_from&quot;&gt;Bringing it to life with rescue_from&lt;/h2&gt;

&lt;p&gt;On the &lt;code class=&quot;highlighter-rouge&quot;&gt;ApplicationController&lt;/code&gt;, we handle raised &lt;code class=&quot;highlighter-rouge&quot;&gt;ApplicationException&lt;/code&gt;-s as follows:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ApplicationController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActionController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;API&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;rescue_from&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;with: :show_exception&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;protected&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show_exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;json: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;status: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;status&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This allows us to raise custom exceptions from any location while handling a request.&lt;/p&gt;

&lt;h2 id=&quot;adding-more-detail-to-exceptions&quot;&gt;Adding more detail to exceptions&lt;/h2&gt;

&lt;p&gt;Note that the second preview example included a &lt;code class=&quot;highlighter-rouge&quot;&gt;validation_errors&lt;/code&gt; key with extra information about the event. Using plain objects allows us to add or modify the response as per our requirements.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Users&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ValidationFailureException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationException&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:validation_failure&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Validation of params failed'&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@description&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'The server could not validate the parameters present with the request. Please check the validation_errors key (hash) for more details.'&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;response&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;validation_errors: &lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;errors&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I’ve used variants of this pattern multiple times over the years, and find it a &lt;em&gt;clean&lt;/em&gt; way to handle &lt;em&gt;exceptional&lt;/em&gt; situations that require a simple response to indicate failure. To see this pattern in action in a project, check out &lt;a href=&quot;https://github.com/godreams/admin-server&quot;&gt;GoDreams Admin Server&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="ruby" /><category term="rails" /><category term="exceptions" /><summary type="html">I want to share a pattern that I’ve repeated multiple times in the past when developing API-s with Rails, which grants the ability to respond to invalid requests with a standardized message format by raising an exception.</summary></entry><entry><title type="html">Mixing React with jQuery</title><link href="https://blog.harigopal.in/guides/mixing-react-with-jquery/" rel="alternate" type="text/html" title="Mixing React with jQuery" /><published>2016-12-29T00:00:00+05:30</published><updated>2016-12-29T00:00:00+05:30</updated><id>https://blog.harigopal.in/guides/mixing-react-with-jquery</id><content type="html" xml:base="https://blog.harigopal.in/guides/mixing-react-with-jquery/">&lt;p&gt;For the past two weeks, I’ve been merrily mixing jQuery into my React components, and I have a few gotchas to share. jQuery certainly needs no introduction, but if you’re new to React, check out &lt;a href=&quot;https://facebook.github.io/react&quot;&gt;Facebook’s &lt;em&gt;excellent&lt;/em&gt; documentation on it&lt;/a&gt;, and try building something with it - it’s a peek into the future!&lt;/p&gt;

&lt;h2 id=&quot;why-even-do-that&quot;&gt;Why even do that?&lt;/h2&gt;

&lt;p&gt;Mixing jQuery with React &lt;em&gt;felt wrong&lt;/em&gt; when I first considered it. After all, one of the prime purposes of using React is to escape from the spaghetti-code-hell that can arise when creating complex interfaces with lots of different interactions.&lt;/p&gt;

&lt;p&gt;The thing is, however, that &lt;em&gt;that&lt;/em&gt; hell is not of jQuery’s making. So the better question is &lt;em&gt;why not?&lt;/em&gt; jQuery is the default JS library available to you if you work with Rails (like I do), and it makes working with JavaScript much easier.&lt;/p&gt;

&lt;h2 id=&quot;its-all-about-the-state&quot;&gt;It’s all about the state&lt;/h2&gt;

&lt;p&gt;The main issue you’ll encounter if you add jQuery to a React component is unexpected interactions with React’s state-based renderer. In most cases, this means issues with modifications to the DOM, made by jQuery, that React isn’t aware of.&lt;/p&gt;

&lt;h3 id=&quot;a-problematic-scenario&quot;&gt;A problematic scenario&lt;/h3&gt;

&lt;p&gt;Let’s take the case of using your friendly neighborhood datepicker inside a component.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;class ExerciseRecord extends React.Component {
  componentDidMount() {
    $('.js-date-input').myFavDatePicker();
  }

  render() {
    return (
      &amp;lt;form onSubmit={ this.handleSubmit }&amp;gt;
        { this.props.exercises.map(function (exercise, index) {
          return (
            &amp;lt;div&amp;gt;
              &amp;lt;label&amp;gt;{ exercise } done on&amp;lt;/label&amp;gt;
              &amp;lt;input className='js-date-input'
                     name={ &quot;dates[&quot; + exercise + &quot;]&quot; }/&amp;gt;
            &amp;lt;/div&amp;gt;
          );
        }
        &amp;lt;input type=&quot;submit&quot;/&amp;gt;
      &amp;lt;/form&amp;gt;
    );
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The problem above is that jQuery code doesn’t account for changes made by React, which means that the datepickers are initialized only once. Any modification of &lt;code class=&quot;highlighter-rouge&quot;&gt;this.props.exercises&lt;/code&gt; (from a parent component) that causes a re-render of this component would introduce new fields without an active datepicker.&lt;/p&gt;

&lt;h3 id=&quot;the-fix-extract-and-control&quot;&gt;The fix: Extract and control&lt;/h3&gt;

&lt;p&gt;I see two possible fixes for this situation:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The simplest fix would be to use &lt;code class=&quot;highlighter-rouge&quot;&gt;componentDidUpdate&lt;/code&gt; to initialize datepickers on all updates.&lt;/li&gt;
  &lt;li&gt;Extract the responsibility to a new &lt;code class=&quot;highlighter-rouge&quot;&gt;DateInput&lt;/code&gt; component.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Repeated initializations could cause issues with the datepicker, so my preferred approach would be to perform an extraction:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;class DateInput extends React.component {
  componentDidMount() {
    $('.js-date-input-' + this.props.key).myFavDatePicker();
  }

  handleChange() {
    this.setState(date: $(event.target).val());
    // and maybe pass it back up the chain?
  }

  render() {
    return (
      &amp;lt;input className={ 'js-date-input-' + this.props.key }
             onChange={ this.handleChange }/&amp;gt;
    );
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note how I’ve used the &lt;code class=&quot;highlighter-rouge&quot;&gt;key&lt;/code&gt; prop to uniquely identify the input. The &lt;code class=&quot;highlighter-rouge&quot;&gt;key&lt;/code&gt; can serve another purpose, which I’ll discuss in a bit.&lt;/p&gt;

&lt;h2 id=&quot;clean-up-after-yourself&quot;&gt;Clean-up after yourself&lt;/h2&gt;

&lt;p&gt;In the above example, we’ve created a component to manage creation and updation of the datepicker element. We should go one step further and ensure that the component can also manage its own destruction.&lt;/p&gt;

&lt;p&gt;jQuery libraries often modify or introduce new elements into the DOM, which is often placed at the bottom of &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt;, placing it outside the React container. If the React component is unmounted, this leaves open the very real possibility that it’ll leave behind junk in the DOM. Cleaning up after yourself should be simple if the library supports it (most do):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;class DateInput extends React.component {
  componentWillUnmount() {
    $('.js-date-input-' + this.props.key).myFavDatePicker('destroy');
  }
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;using-key-to-regenerate-components&quot;&gt;Using &lt;em&gt;key&lt;/em&gt; to regenerate components&lt;/h2&gt;

&lt;p&gt;In rare cases, direct manipulations of the DOM from jQuery can lead to a situation which renders React unable to update the component. In such situations, it’s up to you to alter the &lt;code class=&quot;highlighter-rouge&quot;&gt;key&lt;/code&gt; prop passed to the component.&lt;/p&gt;

&lt;p&gt;Updating &lt;code class=&quot;highlighter-rouge&quot;&gt;key&lt;/code&gt; instructs React to discard the previous component and create a new one. This gives you a pristine component to work with. In such situations it might be wise to ponder whether a more conventional solution can be had by employing clever(er) coding.&lt;/p&gt;

&lt;h2 id=&quot;communication-with-the-jquery-world-outside&quot;&gt;Communication with the jQuery world outside&lt;/h2&gt;

&lt;p&gt;If you’re like me, then you’re probably introducing React components into an existing project (that uses jQuery), instead of building a entirely React-based application. So unless your component is trivial, you’ll need a good way to let the jQuery-driven world outside communicate with the React (root) component.&lt;/p&gt;

&lt;p&gt;React’s &lt;a href=&quot;https://facebook.github.io/react/blog/2015/10/01/react-render-and-top-level-api.html&quot;&gt;Top Level API&lt;/a&gt; makes this super easy. Use &lt;code class=&quot;highlighter-rouge&quot;&gt;ReactDOM.render&lt;/code&gt; to create or update existing components, and &lt;code class=&quot;highlighter-rouge&quot;&gt;ReactDOM.unmountComponentAtNode&lt;/code&gt; to destroy existing ones.&lt;/p&gt;

&lt;p&gt;Whichever you pick, &lt;strong&gt;do not&lt;/strong&gt; do what I did the first time; &lt;code class=&quot;highlighter-rouge&quot;&gt;$('.react-container'').html('')&lt;/code&gt; will leave behind loaded React components in memory. Ouch.&lt;/p&gt;

&lt;h2 id=&quot;server-side-rendering-is-a-no-go&quot;&gt;Server-side rendering is a no-go&lt;/h2&gt;

&lt;p&gt;A lot of jQuery code simply won’t execute without &lt;code class=&quot;highlighter-rouge&quot;&gt;window&lt;/code&gt; being available - which it isn’t on the server. So if you want to render server-side you’ll have to avoid using jQuery for initial render of all components, which can be pretty tricky.&lt;/p&gt;

&lt;h2 id=&quot;wrap-up&quot;&gt;Wrap-up&lt;/h2&gt;

&lt;p&gt;The bottom line is that jQuery is beloved by many, and if using jQuery makes adopting React more palatable then by all means, mix and enjoy. But as the saying goes, &lt;em&gt;enjoy responsibly&lt;/em&gt; - keeping the quirks and drawbacks in mind will let you combine the best of both worlds. Cheers!&lt;/p&gt;</content><author><name></name></author><category term="react" /><category term="jquery" /><category term="rails" /><category term="javascript" /><summary type="html">For the past two weeks, I’ve been merrily mixing jQuery into my React components, and I have a few gotchas to share. jQuery certainly needs no introduction, but if you’re new to React, check out Facebook’s excellent documentation on it, and try building something with it - it’s a peek into the future!</summary></entry><entry><title type="html">The next step</title><link href="https://blog.harigopal.in/blogging/the-next-step/" rel="alternate" type="text/html" title="The next step" /><published>2016-12-18T00:00:00+05:30</published><updated>2016-12-18T00:00:00+05:30</updated><id>https://blog.harigopal.in/blogging/the-next-step</id><content type="html" xml:base="https://blog.harigopal.in/blogging/the-next-step/">&lt;p&gt;&lt;strong&gt;Objective:&lt;/strong&gt; I’m going to post my thoughts on the programming-related topics - whether they are interesting tidbits from my day-to-day work, ideas that I’ve encountered in my wanderings across the web, or things that I’ve learned from conversations with friends. This won’t be easy, but then good things rarely are.&lt;/p&gt;</content><author><name></name></author><summary type="html">Objective: I’m going to post my thoughts on the programming-related topics - whether they are interesting tidbits from my day-to-day work, ideas that I’ve encountered in my wanderings across the web, or things that I’ve learned from conversations with friends. This won’t be easy, but then good things rarely are.</summary></entry></feed>